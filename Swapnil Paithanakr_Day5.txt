Name:Swapnil Paithankar
Prn_094

package day5;

/*
 1) Create a multi-level inheritance , instantiate the child class and observe constructor invocation.
 Also show, if needed how will u invoke parent class constructor from child class ?
 */

class a{
	
	private int num;
	
	public a(int k)
	{
		System.out.println("Inside a class");
	}
	
}

class b extends a{
	
	public b()
	{
		super(30);   //invoke parent class constructor with child
		System.out.println("Inside b class");
		
	}
	
	
}

class c extends b{
	
	public c(int k)
	{
		
		System.out.println("Inside c class");
		
	}
	
}
public class MyClass {

	public static void main(String[] args) {
		
		c ref=new c(20);
		

	}

}


package day5;

/*
 2) create a class "Vehicle", define a method "public void start()" in it. 
 From this class derive a class FourWheeler. 
 How will u override "start()" method of parent class ?
 */


class Vehicle{
	public void start()
	{
		System.out.println("Vehicle start");
	}
}

class Fourwheeler extends Vehicle{
	public void start()
	{   
		System.out.println("Inside Fourwheeler");
		 super.start();
	}
}
public class MyClass {

	public static void main(String[] args) {
		Vehicle ref=new Fourwheeler();
		ref.start();
		

	}

}

package day5;
/*3.Go for Hierarchical inheritance, create instances of child class and observe constructor invocation.*/
class A{
	public A(int k)
	{
		System.out.println("Inside def constructor of A");
	}
}

class B extends A{
	
	public B()
	{
		super(20);
		System.out.println("Inside def constructor of B");
	}
}

class C extends A{
	
	public C(int k)
	{
		super(15);
		System.out.println("Inside def constructor of C");
	}
}
public class MyClass {

	public static void main(String[] args) {
		
		B x=new B();
		C y=new C(20);
		

	}

}
package day5;

/*
 4) Create a class "Top1" with "disp1()" method.
From this class Derive "Bottom1", "Bottom2" and "Bottom3" classes ,override the "disp1()".
Now show how will u achieve dynamic polymorphism.

 */

class Top1{
	public void disp1()
	{
		System.out.println("Inside Top1");
	}
}

class Bottom1 extends Top1{
	
	public void disp1()
	{
		System.out.println("Inside Bottom1");
	}
}
class Bottom2 extends Top1{
	
	public void disp1()
	{
		System.out.println("Inside Bottom2");
	}
}
class Bottom3 extends Top1{
	
	public void disp1()
	{
		System.out.println("Inside Bottom3");
	}
}

public class MyClass {

	public static void main(String[] args) {
		Top1 t1=new Bottom1();                  //upcasting
		Top1 t2=new Bottom2();             
		Top1 t3=new Bottom3();
		
		t1.disp1();                //late binding
		t2.disp1();
		t3.disp1();
		

	}

}

package day5;
/*
 5) create abstract class Shape. declare "draw()" function as abstract. From this class define
  "Triangle","Polygon" and "Circle" .
create an array of Shape having 3 elements.
store child objects into this array . and call
their draw function.

 */

abstract class Shape{
	
	abstract public void draw();
	
}

class Triangle extends Shape{
	 public void draw() {
		 System.out.println("Draw Triangle");
	 }
	
}
class Polygon extends Shape{
	 public void draw() {
		 System.out.println("Draw Polygon");
	 }
	
}
class Circle extends Shape{
	 public void draw() {
		 System.out.println("Draw Circle");
	 }
	
}

public class MyClass {

	public static void main(String[] args) {
		Shape arr[]=new Shape[3];
		
	arr[0]=new Triangle();
	arr[1]=new Polygon();
	arr[2]=new Circle();
	
	for(int i=0;i<arr.length;i++)
	{
		arr[i].draw();
	}
	
	

	}

}

package day5;
/*
6) Define interface "A" with "disp1()" method.
Derive from "A", interface "B" with "disp2" method.
Derive class "C" , from "B".
Instantiate class "C" and call its members as well as derived from parent interfaces

 */
interface A1
{
      void disp1();  
}

interface B1 extends A1
{
	
	void disp2();
}

class C1 implements B1{
	
	public void disp1()
	{
		System.out.println("Inside A");
	}
	
	public void disp2()
	{
		System.out.println("Inside B");
	}
	

	
}
public class MyClass {

	public static void main(String[] args) {
		
		C1 c1=new C1();
		c1.disp1();
		c1.disp2();	

	}

}

package day5;
/*
 7) Define class "Parent1" with some data.
Define interface "Parent2" with some methods.
Derive a class "Child" from "Parent1" and "Parent2", instantiate it and call the members.

 */

class Parent1{
	int k=10;
	Parent1()
	{
		
	System.out.println("Inside def constructor");
	}
}

interface Parent2{
	
	void display();
	
}

class Boy extends Parent1 implements Parent2{
	
	public void display()
	{
		
		System.out.println("Inside parent 2");
	}
	
	
	
}

public class MyClass {

	public static void main(String[] args) {
		
		Boy c1=new Boy();
		
		c1.display();
		
		

	}

}

package day5;

/*
 8) Define a class "base1" with only parameterized constructor.
Derive a class "sub1" from "base1". This class should have following constructors
	a) Default
	b) one parameter
	c) two parameter
Now try to instantiate "sub1" , using any of the above mentioned constructors.

 */

class base1{
	private int k;
	
	public base1(int k)
	{
		this.k=k;
		System.out.println("Inside def cons "+k);
	}
}

class Sub1 extends base1{
	private int m;
	private int l;
	private int n;
	
	Sub1()
	{
		super(10);
		System.out.println("Inside def constructor ");
		
	}
	
	public Sub1(int m)
	{   
		super(20);
		this.m=m;
		System.out.println("Inside def constructor "+m);
		
		
	}
	
	Sub1(int l,int n)
	{
		super(30);
		this.l=l;
		this.n=n;
		System.out.println("Inside para constructor "+l+" "+n);
	}
}
public class MyClass {

	public static void main(String[] args) {
		Sub1 s1=new Sub1();
		Sub1 s2=new Sub1(20);
		Sub1 s3=new Sub1(10,30);
		
		
		
	}

}
package day5;

/*
 9) create interface "Game" , have an abstract method "play()". 
 from this interface implements classes like "Cricket" , "FootBall" and "Tennis".
Now Define one more class 
public class Demo with main function.
In this class have a static method "perform" which will 
take interface reference as parameter.inside "perform()" 
see to it that any child object passed ,its "play()" method should be invoked.
 Call "perform()" method from main function.

 */

interface Game{
	
	void play();
}

class Cricket implements Game{
	
	public void play()
	{
		System.out.println("Play cricket");
	}
}

class Football implements Game{
	
	public void play()
	{
		System.out.println("Play Football");
	}
}
class Tennis implements Game{
	
	public void play()
	{
		System.out.println("Play Tennis");
	}
}
public class MyClass {

	static void perform(Game k)
	{
		k.play();
	}
	
	public static void main(String[] args) {
		
		perform(new Cricket());
		perform(new Football());
		perform(new Tennis());

	}

}

